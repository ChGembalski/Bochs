# Bochs Keymap file
# $Id$
# Target: PC(x86) keyboard, DE keymap, MacOSX gui
# Author: Christoph Gembalski
#
# The keymap file describes the layout of a keyboard, and how it translates
# into Bochs key codes.
#
# Format:
#  BX_Keysym                ASCII_equivalent      Host_key_name
#
# Or, for keys that require modifiers:
#  BX_Keysym+BX_Modifier    ASCII_equivalent      Host_key_name
#
# BX_Keysym and BX_Modifier must be present in the bx_key_symbol[] list in
# gui/keymap.cc.  The BX_Modifier is usually a shift key press, but it
# could be any key.  Presently a maximum of one modifier is supported, but this
# could be changed in keymap.h (structure def has only one slot for modifier),
# keymap.cc (parsing code), and iodev/keyboard.cc (simulate keypresses for >1
# modifier).
#
# The ASCII_equivalent must be either apostrophe + one character + apostrophe,
# or one of these keywords: space, return, tab, backslash, apostrophe, none.
# This format is designed to look like a char constant in C, but it's a very
# simple parser.  There's no concept of backslash being an escape char.  The
# backslash and apostrophe entries are provided for aesthetic purposes only: no
# C++ programmer wants to see '\' or '''. The parser doesn't care, but they are
# ugly.
#
# Host_key_name is the name of the key combination according to the gui library
# (X windows, SDL, etc).  Each GUI module must provide a function that converts
# these host key names into numbers.  A pointer to the conversion function is
# passed to loadKeymap(), and it is used when parsing the keymap file.  As the
# keymap file is parsed, the conversion function is called for each host key
# name, to convert it into a number.  Only the number is stored.  If the host
# key name is not found, the conversion function returns BX_KEYMAP_UNKNOWN, and
# the keymap code will panic, like this:
#
#    [KMAP ] line 51: unknown host key name 'SDLK_PAREN_RIGHT'
#
# If this happens, you must edit the keymap file, and either correct the host
# key name or comment out that line.
#
# Now host keys may have one modifier. Resolving is done by
# BXKeyEntry *findHostKey(Bit32u key, Bit32u keymod);
#

BX_KEY_7+BX_KEY_ALT_R                         '{'        kVK_ANSI_8+kMod_Option_Right
BX_KEY_8+BX_KEY_ALT_R                         '['        kVK_ANSI_5+kMod_Option_Right
BX_KEY_9+BX_KEY_ALT_R                         ']'        kVK_ANSI_6+kMod_Option_Right
BX_KEY_0+BX_KEY_ALT_R                         '}'        kVK_ANSI_9+kMod_Option_Right
BX_KEY_Q+BX_KEY_ALT_R                         '@'        kVK_ANSI_L+kMod_Option_Right
BX_KEY_0+BX_KEY_SHIFT_L                       '='        kVK_ANSI_KeypadEquals
